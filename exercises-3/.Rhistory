lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
rmse(saratoga_test$price, yhat_test1)
rmse(saratoga_test$price, yhat_test2)
rmse(saratoga_test$price, yhat_test3)
}
# Split into training and testing sets
rmse_loop = do(20)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
data.frame(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
# Split into training and testing sets
rmse_loop = do(20)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
data.frame(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
# Split into training and testing sets
rmse_loop = do(20)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
data.frame(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
warnings()
# Split into training and testing sets
rmse_loop = do(20)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
c(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
# Split into training and testing sets
rmse_loop = do(100)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
c(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
library(mosaic)
data(SaratogaHouses)
summary(SaratogaHouses)
# Baseline model
lm_small = lm(price ~ bedrooms + bathrooms + lotSize, data=SaratogaHouses)
# 11 main effects
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=SaratogaHouses)
# Sometimes it's easier to name the variables we want to leave out
# The command below yields exactly the same model.
# the dot (.) means "all variables not named"
# the minus (-) means "exclude this variable"
lm_medium2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=SaratogaHouses)
coef(lm_medium)
coef(lm_medium2)
# All interactions
# the ()^2 says "include all pairwise interactions"
lm_big = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=SaratogaHouses)
rmse = function(y, yhat) {
sqrt( mean( (y - yhat)^2 ) )
}
# Split into training and testing sets
rmse_loop = do(100)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
c(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
# How to handle land value?
# perhaps think about defining a target variable that is purely house value
# forgetting about the intrinsic value of the lot/land
SaratogaHouses = mutate(SaratogaHouses, houseValue = price - landValue)
lm2 = lm(houseValue ~ . - sewer - waterfront - landValue - price - newConstruction, data=saratoga_train)
# Split into training and testing sets
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
yhat_test2 = predict(lm2, saratoga_test)
rmse(saratoga_test$houseValue, yhat_test2)
colMeans(rmse_loop)
# Split into training and testing sets
rmse_loop = do(100)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
c(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
colMeans(rmse_loop)
data(SaratogaHouses)
data(SaratogaHouses)
summary(SaratogaHouses)
# Baseline model
lm_small = lm(price ~ bedrooms + bathrooms + lotSize, data=SaratogaHouses)
# 11 main effects
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=SaratogaHouses)
# Sometimes it's easier to name the variables we want to leave out
# The command below yields exactly the same model.
# the dot (.) means "all variables not named"
# the minus (-) means "exclude this variable"
lm_medium2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=SaratogaHouses)
coef(lm_medium)
coef(lm_medium2)
# All interactions
# the ()^2 says "include all pairwise interactions"
lm_big = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=SaratogaHouses)
rmse = function(y, yhat) {
sqrt( mean( (y - yhat)^2 ) )
}
# Split into training and testing sets
rmse_loop = do(100)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
c(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
colMeans(rmse_loop)
# Split into training and testing sets
rmse_loop = do(100)*{
n = nrow(SaratogaHouses)
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
# Root mean-squared prediction error
c(
rmse1 = rmse(saratoga_test$price, yhat_test1),
rmse2 = rmse(saratoga_test$price, yhat_test2),
rmse3 = rmse(saratoga_test$price, yhat_test3))
}
colMeans(rmse_loop)
lithium <- read.csv("C:/Users/Nathan/Downloads/result.csv")
View(lithium)
ggplot(data = lithium) +
geom_point(aes(x = ActivityStartDate, y = ResultMeasureValue, group = ActivityDepthHeightMeasure.MeasureValue)) +
geom_point(aes(color=ActivityDepthHeightMeasure.MeasureValue))
library(tidyverse)
ggplot(data = lithium) +
geom_point(aes(x = ActivityStartDate, y = ResultMeasureValue, group = ActivityDepthHeightMeasure.MeasureValue)) +
geom_point(aes(color=ActivityDepthHeightMeasure.MeasureValue))
ggplot(data = lithium, aes(x = ActivityStartDate, y = ResultMeasureValue, group = ActivityDepthHeightMeasure.MeasureValue)) +
geom_point(aes(color=ActivityDepthHeightMeasure.MeasureValue))
lithium = arrange(lithium, ActivityStartDate)
ggplot(data = lithium, aes(x = ActivityStartDate, y = ResultMeasureValue, group = ActivityDepthHeightMeasure.MeasureValue)) +
geom_point(aes(color=ActivityDepthHeightMeasure.MeasureValue))
library(tidyverse)
lithium <- read.csv("C:/Users/Nathan/Downloads/result_1.csv")
View(lithium)
lithium_sorted = arrange(lithium, ResultMeasureValue)
View(lithium_sorted)
lithium_cleaned = subset(lithium, is.numeric(ResultMeasureValue))
lithium_cleaned = subset(lithium, is.numeric(lithium$ResultMeasureValue))
lithium_cleaned = subset(lithium, is.integer(lithium$ResultMeasureValue))
lithium <- read.csv("C:/Users/Nathan/Downloads/result_1.csv")
View(lithium)
lithium_cleaned = subset(lithium, is.integer(lithium$ResultMeasureValue))
View(lithium)
lithium_cleaned = subset(lithium, lithium$ResultMeasure.MeasureUnitCode = "ug/l")
lithium_cleaned = subset(lithium, lithium$ResultMeasure.MeasureUnitCode == "ug/l")
View(lithium_cleaned)
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != 0.0 )
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.0" )
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.00")
lithium_cleaned$ResultMeasureValue = as.numeric(lithium_cleaned$ResultMeasureValue)
lithium <- read.csv("C:/Users/Nathan/Downloads/result_1.csv")
View(lithium)
lithium_cleaned = subset(lithium, lithium$ResultMeasure.MeasureUnitCode == "ug/l")
lithium_cleaned = subset(lithium, lithium$ResultMeasure.MeasureUnitCode == "ug/l")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.0")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.00")
lithium_cleaned$ResultMeasureValue.Numeric = as.numeric(lithium_cleaned$ResultMeasureValue)
View(lithium_cleaned)
class(lithium_cleaned$ResultMeasureValue[1])
as.numeric(as.character(lithium_cleaned))
lithium_cleaned$ResultMeasureValue.Numeric = as.numeric(as.character(lithium_cleaned$ResultMeasureValue))
lithium_cleaned = arrange(lithium_cleaned, ResultMeasureValue.Numeric)
library(tidyverse)
lithium_cleaned = arrange(lithium_cleaned, ResultMeasureValue.Numeric)
View(lithium_cleaned)
View(lithium)
ggplot(data = lithium, aes(x = ActivityStartDate, y = ResultMeasureValue, group = ActivityDepthHeightMeasure.MeasureValue)) +
geom_histogram(binwidth=10)
ggplot(data = lithium, aes(ResultMeasureValue.Numeric) +
ggplot(data = lithium, aes(ResultMeasureValue.Numeric)) +
geom_histogram(binwidth=10)
ggplot(data = lithium, aes(ResultMeasureValue.Numeric)) +
geom_histogram(binwidth=10)
ggplot(data = lithium_cleaned, aes(ResultMeasureValue.Numeric)) +
geom_histogram(binwidth=10)
ggplot(data = lithium_cleaned, aes(x = ResultMeasureValue.Numeric)) +
geom_histogram(binwidth=10)
ggplot(data = lithium_cleaned, aes(x = ResultMeasureValue)) +
geom_histogram(binwidth=10)
remove(lithium_cleaned, is.na(lithium_cleaned, ResultMeasureValue.Numeric))
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue.Numeric != NA)
lithium_cleaned = subset(lithium_cleaned, ! is.na(lithium_cleaned, ResultMeasureValue.Numeric))
lithium_cleaned = subset(lithium_cleaned, ! is.na(lithium_cleaned$ResultMeasureValue.Numeric))
lithium_cleaned = subset(lithium_cleaned, !is.na(lithium_cleaned$ResultMeasureValue.Numeric))
lithium_cleaned = subset(lithium, lithium$ResultMeasure.MeasureUnitCode == "ug/l")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.0")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.00")
lithium_cleaned$ResultMeasureValue.Numeric = as.numeric(lithium_cleaned$ResultMeasureValue)
lithium_cleaned$ResultMeasureValue.Numeric = as.numeric(as.character(lithium_cleaned$ResultMeasureValue))
lithium_cleaned = subset(lithium_cleaned, isFALSE(is.na(lithium_cleaned$ResultMeasureValue.Numeric)))
lithium_cleaned = subset(lithium, lithium$ResultMeasure.MeasureUnitCode == "ug/l")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.0")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.00")
lithium_cleaned$ResultMeasureValue.Numeric = as.numeric(lithium_cleaned$ResultMeasureValue)
lithium_cleaned$ResultMeasureValue.Numeric = as.numeric(as.character(lithium_cleaned$ResultMeasureValue))
lithium_cleaned = arrange(lithium_cleaned, ResultMeasureValue.Numeric)
View(lithium_cleaned)
lithium_cleaned = subset(lithium_cleaned, isFALSE(is.na(lithium_cleaned$ResultMeasureValue.Numeric)))
?subset
View(lithium_cleaned)
lithium_cleaned = subset(lithium, lithium$ResultMeasure.MeasureUnitCode == "ug/l")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.0")
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue != "0.00")
lithium_cleaned$ResultMeasureValue.Numeric = as.numeric(lithium_cleaned$ResultMeasureValue)
lithium_cleaned = subset(lithium_cleaned, lithium_cleaned$ResultMeasureValue.Numeric < 2000)
View(lithium_cleaned)
lithiumSamples <- read.csv("~/UT Courses/3. Spring 2019/Causal Inference/Research Paper/lithiumSamples.csv")
View(lithiumSamples)
class(lithium_cleaned$ResultMeasureValue[1])
lithiumSamples_decimals <- read.csv("~/UT Courses/3. Spring 2019/Causal Inference/Research Paper/lithiumSamples_decimals.csv")
View(lithiumSamples_decimals)
class(lithiumSamples$ResultMeasureValue[1])
View(milk)
View(lithiumSamples)
lithiumSamples$ResultMeasureValue.ug = lithiumSamples$ResultMeasureValue
lithiumSamples <- within(lithiumSamples, ResultMeasureValue.ug[ResultMeasure.MeasureUnitCode == "mg/l"]
<- ResultMeasureValue[ResultMeasure.MeasureUnitCode == "mg/l"]*100)
lithiumSamples <- within(lithiumSamples, ResultMeasureValue.ug[ResultMeasure.MeasureUnitCode == "mg/l"]
<- ResultMeasureValue[ResultMeasure.MeasureUnitCode == "mg/l"]*1000)
lithiumSamples_5000 = subset(lithiumSamples, lithiumSamples$ResultMeasureValue.ug < 5000)
View(lithiumSamples_5000)
ggplot(data = lithiumSamples_5000, aes(x = ResultMeasureValue.ug)) +
geom_histogram(binwidth=10)
lithium_cleaned = arrange(lithiumSamples, ResultMeasureValue.ug)
View(lithium_cleaned)
lithiumSamples_1000 = subset(lithiumSamples, lithiumSamples$ResultMeasureValue.ug < 1000)
ggplot(data = lithiumSamples_1000, aes(x = ResultMeasureValue.ug)) +
geom_histogram(binwidth=10)
ggplot(data = lithiumSamples_1000, aes(x = ResultMeasureValue.ug)) +
geom_histogram(binwidth=1)
ggplot(data = lithiumSamples_1000, aes(x = ResultMeasureValue.ug)) +
geom_histogram(binwidth=5)
ggplot(data = lithiumSamples_1000, aes(x = ResultMeasureValue.ug)) +
geom_histogram(binwidth=10)
ggplot(data = lithiumSamples_1000, aes(x = ResultMeasureValue.ug)) +
geom_histogram(binwidth=8)
ggplot(data = lithiumSamples_1000, aes(x = ResultMeasureValue.ug)) +
geom_histogram(binwidth=10)
View(lithiumSamples_1000)
is.numeric.Date(lithiumSamples_1000$ActivityStartDate[2])
lithiumSamples_1000$ActivityStartDate[2]
lithiumSamples_1000$ActivityStartDate.Date = as.Date(lithiumSamples_1000$ActivityStartDate, format = "%m/%d/%Y")
lithiumSamples_1000$ActivityStartDate.Date[2]-lithiumSamples_1000$ActivityStartDate.Date[3]
min(lithiumSamples_1000$ActivityStartDate.Date)
max(lithiumSamples_1000$ActivityStartDate.Date)
lithSummary = lithiumSamples_1000 %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(
ChangeInLevel = max(ResultMeasureValue.ug)-rmin(ResultMeasureValue.ug),
NumberOfObs = nrow(ResultMeasureValue.ug)
LengthOfTime = max(ActivityStartDate.Date)-min(ActivityStartDate.Date)
)
lithSummary = lithiumSamples_1000 %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(
ChangeInLevel = max(ResultMeasureValue.ug)-rmin(ResultMeasureValue.ug),
NumberOfObs = nrow(ResultMeasureValue.ug),
LengthOfTime = max(ActivityStartDate.Date)-min(ActivityStartDate.Date)
)
lithSummary = lithiumSamples_1000 %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(
ChangeInLevel = max(ResultMeasureValue.ug)-min(ResultMeasureValue.ug),
NumberOfObs = nrow(ResultMeasureValue.ug),
LengthOfTime = max(ActivityStartDate.Date)-min(ActivityStartDate.Date)
)
lithSummary = lithiumSamples_1000 %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(
ChangeInLevel = max(ResultMeasureValue.ug)-min(ResultMeasureValue.ug),
NumberOfObs = nrow(.),
LengthOfTime = max(ActivityStartDate.Date)-min(ActivityStartDate.Date)
)
View(lithSummary)
lithSummary = lithiumSamples_1000 %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(
Org = OrganizationIdentifier,
ChangeInLevel = max(ResultMeasureValue.ug)-min(ResultMeasureValue.ug),
NumberOfObs = nrow(.),
LengthOfTime = max(ActivityStartDate.Date)-min(ActivityStartDate.Date)
)
lithSummary = lithiumSamples_1000 %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(
Org = ï..OrganizationIdentifier,
ChangeInLevel = max(ResultMeasureValue.ug)-min(ResultMeasureValue.ug),
NumberOfObs = nrow(.),
LengthOfTime = max(ActivityStartDate.Date)-min(ActivityStartDate.Date)
)
lithSummary = lithiumSamples_1000 %>%
group_by(ï..OrganizationIdentifier, MonitoringLocationIdentifier) %>%
summarize(
ChangeInLevel = max(ResultMeasureValue.ug)-min(ResultMeasureValue.ug),
NumberOfObs = nrow(.),
LengthOfTime = max(ActivityStartDate.Date)-min(ActivityStartDate.Date)
)
View(lithium)
wpp2019_india2005to2020 <- read.csv("~/Uttar Pradesh Neo-natal Health/UttarPradeshNeoNatalHealth/data/wpp2019_india2005to2020.csv", header=FALSE)
View(wpp2019_india2005to2020)
View(wpp2019_india2005to2020)
wpp2019_india2005to2020 <- read.csv("~/Uttar Pradesh Neo-natal Health/UttarPradeshNeoNatalHealth/data/wpp2019_india2005to2020.csv")
View(wpp2019_india2005to2020)
library(tidyverse)
?geom_curve
ggplot(data = wpp2019_india2005to2020) +
geom_segment(aes(x=Year, y=Linear.interpolation.between.year.2.ave))+
geom_segment(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))+
wpp2019_india2005to2020$Linear.interpolation.between.year.2.ave
ggplot(data = wpp2019_india2005to2020) +
geom_segment(aes(x=Year, y=Linear.interpolation.between.year.2.ave)) +
geom_segment(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))
ggplot(data = wpp2019_india2005to2020) +
geom_point(aes(x=Year, y=Linear.interpolation.between.year.2.ave)) +
geom_point(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))
ggplot(data = wpp2019_india2005to2020) +
geom_point(aes(x=Year, y=Per.year.ave.interpolation)) +
geom_point(aes(x=Year, y=Linear.interpolation.between.year.2.ave)) +
geom_point(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))
ggplot(data = wpp2019_india2005to2020) +
geom_path(aes(x=Year, y=Per.year.ave.interpolation)) +
geom_path(aes(x=Year, y=Linear.interpolation.between.year.2.ave)) +
geom_path(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))
ggplot(data = wpp2019_india2005to2020) +
geom_step(aes(x=Year, y=Per.year.ave.interpolation)) +
geom_path(aes(x=Year, y=Linear.interpolation.between.year.2.ave)) +
geom_path(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))
ggplot(data = wpp2019_india2005to2020) +
geom_step(aes(x=Year, y=Per.year.ave.interpolation), color="red") +
geom_path(aes(x=Year, y=Linear.interpolation.between.year.2.ave)) +
geom_path(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))
ggplot(data = wpp2019_india2005to2020) +
geom_step(aes(x=Year, y=Per.year.ave.interpolation), color="red") +
geom_path(aes(x=Year, y=Linear.interpolation.between.year.2.ave), color="blue") +
geom_path(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave))
ggplot(data = wpp2019_india2005to2020) +
geom_step(aes(x=Year, y=Per.year.ave.interpolation)) +
geom_path(aes(x=Year, y=Linear.interpolation.between.year.2.ave), color="blue") +
geom_path(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave)color="red")
ggplot(data = wpp2019_india2005to2020) +
geom_step(aes(x=Year, y=Per.year.ave.interpolation)) +
geom_path(aes(x=Year, y=Linear.interpolation.between.year.2.ave), color="blue") +
geom_path(aes(x=Year, y=Linear.in.logs.interpolation.between.year.2.ave), color="red")
ggplot(data = wpp2019_india2005to2020) +
geom_step(aes(x=Year, y=Per.year.ave.interpolation)) +
geom_path(aes(x=Year, y=Linear.interpolation.between.year.3.ave), color="blue") +
geom_path(aes(x=Year, y=Linear.in.logs.interpolation.between.year.3.ave), color="red")
setwd("~/UT Courses/3. Spring 2019/Data Mining, Statistical Learning/Homework/DataScienceCourseHomework/exercises-3")
social_marketing <- read.csv("~/UT Courses/3. Spring 2019/Data Mining, Statistical Learning/Homework/DataScienceCourseHomework/exercises-3/data/social_marketing.csv")
View(social_marketing)
